<?php
if ( ! defined( 'ABSPATH' ) ) {
    exit; // Salir si se accede directamente.
}

/**
 * Clase principal para la gestiÃƒÂ³n de citas de Veterinalia Appointment.
 * Maneja la lÃƒÂ³gica de horarios de profesionales y reservas de clientes.
 */
class Veterinalia_Appointment_Manager {

    private static $instance = null;
    private $db_handler; // Para acceder a la base de datos
    private $mailer; // Para enviar correos electrÃƒÂ³nicos
    private $crm_service;
    /** @var VA_Appointment_Availability_Repository_Interface|null */
    private $availability_repository = null;
    /** @var VA_Appointment_Booking_Repository_Interface|null */
    private $booking_repository = null;


    /**
     * Obtiene la ÃƒÂºnica instancia de la clase.
     *
     * @return Veterinalia_Appointment_Manager
     */
    public static function get_instance() {
        if ( is_null( self::$instance ) ) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    private function __construct() {
        // Constructor. AquÃƒÂ­ se registrarÃƒÂ¡n los hooks y se inicializarÃƒÂ¡n otras clases.
        $this->db_handler   = Veterinalia_Appointment_Database::get_instance(); // Inicializar el manejador de la base de datos
        $this->crm_service  = VA_CRM_Service::get_instance();
        $this->mailer       = new Veterinalia_Appointment_Mailer(); // Inicializar el mailer
        add_action( 'plugins_loaded', [ $this, 'init_shortcodes' ] );
        add_action( 'plugins_loaded', [ $this, 'init_admin_settings' ] ); // Nueva inicializaciÃƒÂ³n
        add_action( 'wp_enqueue_scripts', [ $this, 'enqueue_assets' ] ); // Hook para encolar CSS/JS
        add_action( 'rest_api_init', [ $this, 'register_api_routes' ] );
    }

    private function crm(): VA_CRM_Service {
        if ( ! $this->crm_service instanceof VA_CRM_Service ) {
            $this->crm_service = VA_CRM_Service::get_instance();
        }

        return $this->crm_service;
    }

    private function availability_repository(): VA_Appointment_Availability_Repository_Interface {
        if ( ! $this->availability_repository instanceof VA_Appointment_Availability_Repository_Interface ) {
            $factory    = VA_Repository_Factory::instance();
            $repository = $factory->get( 'appointment.availability' );

            if ( ! $repository instanceof VA_Appointment_Availability_Repository_Interface ) {
                global $wpdb;
                $repository = new VA_Appointment_Availability_Repository( $wpdb );
                $factory->bind( 'appointment.availability', $repository );
            }

            $this->availability_repository = $repository;
        }

        return $this->availability_repository;
    }

    private function booking_repository(): VA_Appointment_Booking_Repository_Interface {
        if ( ! $this->booking_repository instanceof VA_Appointment_Booking_Repository_Interface ) {
            $factory    = VA_Repository_Factory::instance();
            $repository = $factory->get( 'appointment.booking' );

            if ( ! $repository instanceof VA_Appointment_Booking_Repository_Interface ) {
                global $wpdb;
                $repository = new VA_Appointment_Booking_Repository( $wpdb );
                $factory->bind( 'appointment.booking', $repository );
            }

            $this->booking_repository = $repository;
        }

        return $this->booking_repository;
    }

    /**
     * Inicializa el manager.
     */
    public function init() {
        // Ejecutar migraciÃƒÂ³n de base de datos
        $this->run_database_migration();
        
        // Inicializar aquÃƒÂ­ otras funcionalidades
        add_action( 'admin_enqueue_scripts', [ $this, 'enqueue_admin_assets' ] );
        // Se elimina la acciÃƒÂ³n conflictiva de aquÃƒÂ­
    }

    /**
     * Inicializa la clase de Shortcodes.
     */
    public function init_shortcodes() {
        // Asegurarse de que la clase de shortcodes estÃƒÂ© cargada
        if ( class_exists( 'Veterinalia_Appointment_Shortcodes' ) ) {
            Veterinalia_Appointment_Shortcodes::get_instance()->init();
        }
    }

    /**
     * Inicializa la clase de Ajustes de AdministraciÃƒÂ³n.
     */
    public function init_admin_settings() {
        if ( class_exists( 'Veterinalia_Appointment_Admin_Settings' ) ) {
            Veterinalia_Appointment_Admin_Settings::get_instance()->init();
        }
    }

/**
 * Encola los scripts y estilos necesarios para el plugin.
 * Implementa carga condicional para optimizar el rendimiento.
 */
public function enqueue_assets() {
    // --- Assets Globales (Se cargan en varias pÃƒÂ¡ginas) ---
    // Estilos para el calendario de reserva (necesario en la pÃƒÂ¡gina del profesional)
    wp_enqueue_style(
        'veterinalia-calendar-style',
        VA_PLUGIN_URL . 'assets/css/veterinalia-calendar.css',
        [],
        VA_PLUGIN_VERSION
    );

    // Scripts de librerÃƒÂ­as externas
    wp_enqueue_script('moment-js', 'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment-with-locales.min.js', [], '2.29.1', true);
    wp_add_inline_script('moment-js', 'moment.locale(\'es\');');
    wp_enqueue_script('tiny-slider', 'https://cdnjs.cloudflare.com/ajax/libs/tiny-slider/2.9.3/min/tiny-slider.js', [], '2.9.3', true);

    // Cliente de API y script principal (necesarios para diferentes shortcodes)
    wp_enqueue_script('va-api-client', VA_PLUGIN_URL . 'assets/js/api-client.js', ['jquery'], VA_PLUGIN_VERSION, true);
    wp_enqueue_script('va-main-script', VA_PLUGIN_URL . 'assets/js/main.js', ['jquery', 'va-api-client'], VA_PLUGIN_VERSION, true);

    wp_localize_script('va-main-script', 'va_ajax_object', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce'    => wp_create_nonce('va_appointment_nonce'),
    ));

    // --- INICIO DE LA CARGA CONDICIONAL PARA EL DASHBOARD ---
    // Obtenemos el post actual que se estÃƒÂ¡ visualizando.
    global $post;
    

    
    // Verificamos si estamos en una pÃƒÂ¡gina o post y si el contenido de ese post tiene nuestro shortcode.
    if (is_a($post, 'WP_Post') && has_shortcode($post->post_content, 'vetapp_professional_dashboard')) {

        // Si la condiciÃƒÂ³n se cumple, cargamos TODOS los assets especÃƒÂ­ficos del dashboard.
        
        // Estilos del Dashboard
        wp_enqueue_style('google-fonts-poppins', 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap', [], null);
        // Font Awesome icons
        // No dependencies, specify version for proper cache busting
        wp_enqueue_style(
            'font-awesome',
            'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css',
            [],
            '6.4.0'
        );
        wp_enqueue_style('va-dashboard-base-styles', VA_PLUGIN_URL . 'assets/css/dashboard-base.css', [], VA_PLUGIN_VERSION);
        wp_enqueue_style('va-dashboard-components-styles', VA_PLUGIN_URL . 'assets/css/dashboard-components.css', ['va-dashboard-base-styles'], VA_PLUGIN_VERSION);
        // Estilos del nuevo mÃƒÂ³dulo de agenda (reemplaza el mÃƒÂ³dulo anterior de appointments)
        wp_enqueue_style('va-agenda-module-styles', VA_PLUGIN_URL . 'assets/css/modules/agenda-module.css', ['va-dashboard-components-styles'], VA_PLUGIN_VERSION);
        wp_enqueue_style('va-module-schedule-styles', VA_PLUGIN_URL . 'assets/css/module-schedule.css', ['va-dashboard-components-styles'], VA_PLUGIN_VERSION);
        // Estilos especÃƒÂ­ficos del mÃƒÂ³dulo de servicios (UI 1:1)
        wp_enqueue_style('va-professional-services-styles', VA_PLUGIN_URL . 'assets/css/professional-services.css', ['va-dashboard-components-styles'], VA_PLUGIN_VERSION);
        // Estilos del mÃƒÂ³dulo de combos de servicios
        wp_enqueue_style('va-combos-module-styles', VA_PLUGIN_URL . 'assets/css/modules/combos-module.css', ['va-dashboard-components-styles'], VA_PLUGIN_VERSION);
        // Estilos del mÃƒÂ³dulo de pacientes (CRM veterinario)
        wp_enqueue_style('va-patients-module-styles', VA_PLUGIN_URL . 'assets/css/modules/patients-module.css', ['va-dashboard-components-styles'], VA_PLUGIN_VERSION);
        // Estilos unificados de modales (heredados del mÃƒÂ³dulo de pacientes)
        wp_enqueue_style('va-unified-modals-styles', VA_PLUGIN_URL . 'assets/css/unified-modals.css', ['va-dashboard-components-styles'], VA_PLUGIN_VERSION);
        
        // Estilos para el nuevo módulo de catálogo
        wp_enqueue_style('va-catalog-module-styles', VA_PLUGIN_URL . 'assets/css/modules/catalog-module.css', ['va-dashboard-components-styles'], VA_PLUGIN_VERSION);
        
        // Scripts del Dashboard y sus Módulos
        // (Aunque los mÃƒÂ³dulos se cargan por AJAX, sus scripts deben estar disponibles desde el inicio)
        wp_enqueue_script('va-professional-dashboard', VA_PLUGIN_URL . 'assets/js/modules/professional-dashboard.js', ['va-api-client'], VA_PLUGIN_VERSION, true);
        wp_enqueue_script('va-professional-services', VA_PLUGIN_URL . 'assets/js/modules/professional-services.js', ['va-api-client'], VA_PLUGIN_VERSION, true);
        wp_enqueue_script('va-professional-schedule', VA_PLUGIN_URL . 'assets/js/modules/professional-schedule.js', ['va-api-client'], VA_PLUGIN_VERSION, true);
        wp_enqueue_script('va-agenda-module', VA_PLUGIN_URL . 'assets/js/modules/agenda-module.js', ['jquery'], VA_PLUGIN_VERSION, true);
        wp_enqueue_script('va-combos-module', VA_PLUGIN_URL . 'assets/js/modules/combos-module.js', ['jquery'], VA_PLUGIN_VERSION, true);
        wp_enqueue_script('va-patients-module', VA_PLUGIN_URL . 'assets/js/modules/patients-module.js', ['jquery'], VA_PLUGIN_VERSION, true);
        wp_enqueue_script('va-catalog-module', VA_PLUGIN_URL . 'assets/js/modules/catalog-module.js', ['va-api-client'], VA_PLUGIN_VERSION, true);
        
        // <-- INICIO DEL CAMBIO: Proyecto Chocovainilla - Paso 1.2 -->
        wp_enqueue_script('va-agenda-wizard', VA_PLUGIN_URL . 'assets/js/modules/agenda-wizard.js', ['jquery', 'va-api-client'], VA_PLUGIN_VERSION, true);
        // <-- FIN DEL CAMBIO: Proyecto Chocovainilla - Paso 1.2 -->
        
        // (legacy) client-dashboard.js removed for v2

        // Estilos especÃƒÂ­ficos del Dashboard del cliente v2
        wp_enqueue_style('va-client-dashboard-base', VA_PLUGIN_URL . 'assets/css/client-dashboard/base.css', [], VA_PLUGIN_VERSION);
        wp_enqueue_style('va-client-dashboard-components', VA_PLUGIN_URL . 'assets/css/client-dashboard/components.css', ['va-client-dashboard-base'], VA_PLUGIN_VERSION);
        wp_enqueue_style('va-client-dashboard-sheets', VA_PLUGIN_URL . 'assets/css/client-dashboard/sheets.css', ['va-client-dashboard-base'], VA_PLUGIN_VERSION);

        // Iconos (Phosphor) Ã¢â‚¬â€œ bundle web
        wp_enqueue_script('phosphor-icons', 'https://unpkg.com/@phosphor-icons/web', [], null, true);

        // Scripts del Dashboard del cliente v2 (vanilla)
        wp_enqueue_script('va-client-dashboard-v2', VA_PLUGIN_URL . 'assets/js/modules/client-dashboard-v2.js', [], VA_PLUGIN_VERSION, true);
        wp_enqueue_script('va-client-dashboard-v2-init', VA_PLUGIN_URL . 'assets/js/main-client-dashboard.js', ['va-client-dashboard-v2'], VA_PLUGIN_VERSION, true);

        // ConfiguraciÃƒÂ³n para el Dashboard del cliente v2
        // Solo obtener/crear client_id para usuarios con _user_type='general'
        $client_id_val = 0;
        $user_type = get_user_meta(get_current_user_id(), '_user_type', true);
        if ($user_type === 'general') {
            $client_id_val = $this->get_or_create_client_id_for_current_user();
        } else {
            error_log('[Appointment Manager] Usuario tiene _user_type=' . $user_type . ', no se obtiene client_id para localize.');
        }
        wp_localize_script('va-client-dashboard-v2', 'VA_Client_Dashboard', [
            'ajax_url'  => admin_url('admin-ajax.php'),
            'rest_url'  => rest_url('vetapp/v1/'),
            'nonce'     => wp_create_nonce('wp_rest'),
            'client_id' => $client_id_val,
            'user_name' => is_user_logged_in() ? wp_get_current_user()->display_name : '',
        ]);

        // El orquestador principal del dashboard
        wp_enqueue_script('va-dashboard-controller', VA_PLUGIN_URL . 'assets/js/dashboard-controller.js', ['jquery', 'va-api-client'], VA_PLUGIN_VERSION, true);

        // El objeto VAApi para la comunicaciÃƒÂ³n con la API REST
        // Evitar colisiÃƒÂ³n con el objeto global VAApi (cliente AJAX)
        wp_localize_script('va-dashboard-controller', 'VA_REST', array(
            'api_url'   => rest_url('vetapp/v1/'),
            'api_nonce' => wp_create_nonce('wp_rest')
        ));
    }
    

    // --- FIN DE LA CARGA CONDICIONAL ---
}
    /**
     * Encola los scripts y estilos necesarios para el ÃƒÂ¡rea de administraciÃƒÂ³n (Proyecto Quiz).
     */
    public function enqueue_admin_assets( $hook ) {
        // Solo cargar nuestro script en la pÃƒÂ¡gina de plantillas
        if ( 'citas-veterinalia_page_va-service-templates' !== $hook ) {
            return;
        }

        // Encolar el CSS del modal (reutilizamos el de servicios profesionales)
        wp_enqueue_style(
            'veterinalia-professional-services-style',
            VA_PLUGIN_URL . 'assets/css/professional-services.css',
            [],
            VA_PLUGIN_VERSION 
        );

        // Encolar el nuevo JS para el admin
        wp_enqueue_script(
            'va-admin-templates-script',
            VA_PLUGIN_URL . 'assets/js/admin-templates.js',
            [ 'jquery' ],
            VA_PLUGIN_VERSION,
            true
        );

        // Pasar el ajax_url y nonce al script de admin
        wp_localize_script(
            'va-admin-templates-script',
            'va_ajax_object',
            [
                'ajax_url' => admin_url( 'admin-ajax.php' ),
                // <<-- CAMBIO CLAVE -->>
                // Usamos una acciÃƒÂ³n de nonce mÃƒÂ¡s genÃƒÂ©rica para toda la pÃƒÂ¡gina de admin.
                'nonce'    => wp_create_nonce( 'va_admin_ajax_nonce' ), 
            ]
        );
    }

    /**
     * Guarda el horario de disponibilidad para un profesional.
     *
     * @param int $professional_id ID del profesional.
     * @param array $schedule_data Array de datos del horario: [ 'day_of_week', 'start_time', 'end_time', 'slot_duration' ]
     * @return bool True si se guarda correctamente, false en caso contrario.
     */
    public function save_professional_schedule( $professional_id, $schedule_data ) {
        if ( empty( $professional_id ) || empty( $schedule_data ) || ! is_array( $schedule_data ) ) {
            return false;
        }

        $professional_id = intval( $professional_id );

        // 1. Eliminar horarios existentes para este profesional
        $this->availability_repository()->delete_professional_availability( intval( $professional_id ) );

        // 2. Insertar nuevos horarios
        $success = true;
        foreach ( $schedule_data as $schedule_item ) {
            $dia_semana_id = isset( $schedule_item['dia_semana_id'] ) ? intval( $schedule_item['dia_semana_id'] ) : 0;
            $start_time    = sanitize_text_field( $schedule_item['start_time'] ?? '' );
            $end_time      = sanitize_text_field( $schedule_item['end_time'] ?? '' );
            $slot_duration = isset( $schedule_item['slot_duration'] ) ? intval( $schedule_item['slot_duration'] ) : 0;

            if ( ! $dia_semana_id || empty( $start_time ) || empty( $end_time ) ) {
                $success = false;
                continue;
            }

            if ( ! $this->availability_repository()->insert_professional_availability( $professional_id, $dia_semana_id, $start_time, $end_time, $slot_duration ) ) {
                $success = false;
            }
        }

        return $success;
    }

    /**
     * Obtiene el horario de disponibilidad para un profesional.
     *
     * @param int $professional_id ID del profesional.
     * @return array Array de objetos de los horarios, o un array vacÃƒÂ­o si no se encuentran.
     */
    public function get_professional_schedule( $professional_id ) {
        if ( empty( $professional_id ) ) {
            return [];
        }
        $schedule = $this->availability_repository()->get_professional_availability( intval( $professional_id ) );
        return is_array( $schedule ) ? $schedule : [];
    }
    
/**
 * Calcula los slots de tiempo disponibles usando la lÃƒÂ³gica HÃƒÂ­BRIDA.
 * Combina un "Intervalo de PresentaciÃƒÂ³n" con una "BÃƒÂºsqueda Inteligente" de huecos.
 *
 * @param int $professional_id ID del profesional.
 * @param string $selected_date Fecha seleccionada en formato YYYY-MM-DD.
    /**
     * Calcula los slots de tiempo disponibles usando la lógica HÍBRIDA.
     * Combina un "Intervalo de Presentación" con una "Búsqueda Inteligente" de huecos.
     *
     * @param int    $professional_id ID del profesional.
     * @param string $selected_date   Fecha seleccionada en formato YYYY-MM-DD.
     * @param int    $service_duration Duración del servicio en minutos.
     * @return array Un array de slots de tiempo disponibles en formato 'H:i'.
     */
    public function get_available_slots_for_date( $professional_id, $selected_date, $service_duration ) {
        if ( empty( $professional_id ) || empty( $selected_date ) || empty( $service_duration ) ) {
            return [];
        }

        $professional_id = intval( $professional_id );

        // 1. Obtener horario de trabajo e intervalo de presentación.
        $dia_semana_id        = date( 'N', strtotime( $selected_date ) );
        $working_hours_rules  = $this->availability_repository()->get_professional_availability( $professional_id );
        $todays_working_blocks = [];
        $presentation_interval = 15; // Intervalo por defecto si el profesional no ha configurado uno.

        foreach ( $working_hours_rules as $rule ) {
            if ( intval( $rule->dia_semana_id ) === intval( $dia_semana_id ) ) {
                $todays_working_blocks[] = [
                    'start' => strtotime( $selected_date . ' ' . $rule->start_time ),
                    'end'   => strtotime( $selected_date . ' ' . $rule->end_time ),
                ];
                $presentation_interval = intval( $rule->slot_duration );
            }
        }

        if ( empty( $todays_working_blocks ) ) {
            return [];
        }

        // 2. Obtener citas ya reservadas (esta consulta es rápida gracias al índice en la BD).
        $booked_appointments = $this->booking_repository()->get_appointments_for_date( $professional_id, $selected_date );

        $busy_slots = [];
        foreach ( $booked_appointments as $app ) {
            $busy_slots[] = [
                'start' => strtotime( $app->appointment_start ),
                'end'   => strtotime( $app->appointment_end ),
            ];
        }

        // 3. Algoritmo Híbrido
        $available_slots     = [];
        $duration_in_seconds = $service_duration * 60;
        $interval_in_seconds = max( 5, $presentation_interval ) * 60;

        foreach ( $todays_working_blocks as $block ) {
            $cursor = $block['start'];

            while ( $cursor < $block['end'] ) {
                $potential_slot_start = $cursor;
                $potential_slot_end   = $potential_slot_start + $duration_in_seconds;

                if ( $potential_slot_end > $block['end'] ) {
                    break;
                }

                $is_available = true;
                foreach ( $busy_slots as $busy_slot ) {
                    if ( $potential_slot_start < $busy_slot['end'] && $potential_slot_end > $busy_slot['start'] ) {
                        $is_available = false;
                        $cursor       = $busy_slot['end'];
                        break;
                    }
                }

                if ( $is_available ) {
                    $available_slots[] = date( 'H:i', $potential_slot_start );

                    $cursor += $interval_in_seconds;

                    foreach ( $busy_slots as $busy_slot ) {
                        if ( $cursor > $busy_slot['start'] && $cursor < $busy_slot['end'] ) {
                            $cursor = $busy_slot['end'];
                            break;
                        }
                    }
                } else {
                    $cursor += $interval_in_seconds;
                }
            }
        }

        $final_slots = array_unique( $available_slots );
        sort( $final_slots );

        return $final_slots;
    }


/**
 * Procesa la reserva de una cita usando la nueva estructura de la base de datos.
 * CORREGIDO para manejar correctamente el campo de 'notas'.
 *
 * @param array $booking_data Datos de la reserva.
 * @return array Resultado de la operaciÃƒÂ³n.
 */
public function book_appointment( $booking_data ) {
    error_log('[Veterinalia Booking] Iniciando proceso de reserva completo');

    // ValidaciÃƒÂ³n de datos de entrada
    $service_id = isset($booking_data['service_id']) ? intval($booking_data['service_id']) : 0;
    $appointment_start_str = isset($booking_data['appointment_start']) ? sanitize_text_field($booking_data['appointment_start']) : '';

    if ( empty($service_id) || empty($appointment_start_str) ) {
        error_log('[Veterinalia Booking] ERROR: Datos incompletos - service_id o appointment_start faltantes');
        return ['success' => false, 'data' => ['message' => 'Datos incompletos.']];
    }

    // Obtener detalles del servicio (precio y duraciÃƒÂ³n)
    $service = $this->db_handler->get_service_by_id($service_id);
    if (!$service) {
        error_log('[Veterinalia Booking] ERROR: Servicio no vÃƒÂ¡lido - ID: ' . $service_id);
        return ['success' => false, 'data' => ['message' => 'Servicio no vÃƒÂ¡lido.']];
    }

    $duration = intval($service->duration);
    $price = $service->price;
    $appointment_start_time = strtotime($appointment_start_str);
    $appointment_end_time = $appointment_start_time + ($duration * 60);

    // ========================================
    // PASO 1: GESTIÃƒâ€œN DEL CLIENTE
    // ========================================
    $client_id = null;
    $client_email = isset($booking_data['client_email']) ? sanitize_email($booking_data['client_email']) : '';
    $is_new_client = false;
    $client_repository = $this->crm()->clients();

    if (!empty($client_email)) {
        error_log('[Veterinalia Booking] Buscando cliente existente por email: ' . $client_email);

        // Buscar cliente existente por email
        $existing_client = $client_repository->get_client_by_email($client_email);

        if ($existing_client) {
            $client_id = $existing_client->client_id;
            error_log('[Veterinalia Booking] Cliente existente encontrado: ID ' . $client_id);
        } else {
            error_log('[Veterinalia Booking] Cliente no encontrado, creando cliente invitado');

            // Crear cliente invitado
            $client_data = [
                'name' => sanitize_text_field($booking_data['client_name']),
                'email' => $client_email,
                'phone' => isset($booking_data['client_phone']) ? sanitize_text_field($booking_data['client_phone']) : null,
                'professional_id' => intval($booking_data['professional_id'])
            ];

            $client_id = $client_repository->create_guest_client($client_data);
            if (!$client_id) {
                error_log('[Veterinalia Booking] ERROR: FallÃƒÂ³ la creaciÃƒÂ³n del cliente invitado');
                return ['success' => false, 'data' => ['message' => 'Error al crear el perfil del cliente.', 'code' => 'client_creation_failed']];
            }

            $is_new_client = true;
            error_log('[Veterinalia Booking] Cliente invitado creado exitosamente: ID ' . $client_id);
        }
    } else {
        // Usar cliente logueado si existe (asociaciÃƒÂ³n por WP user ID)
        $wp_user_id = get_current_user_id();
        if ( $wp_user_id ) {
            error_log('[Veterinalia Booking] No se proporcionÃƒÂ³ email; usando usuario WP logueado ID: ' . $wp_user_id);

            // Intentar obtener el cliente CRM asociado a este WP user
            $crm_client = $client_repository->get_client_by_user_id( $wp_user_id );
            if ( $crm_client ) {
                $client_id = $crm_client->client_id;
                error_log('[Veterinalia Booking] Cliente CRM asociado encontrado: ID ' . $client_id);
            } else {
                // Si no existe cliente CRM, usar el WP user ID como fallback client_id
                $client_id = $wp_user_id;
                error_log('[Veterinalia Booking] No existe cliente CRM para el WP user; usando WP user ID como client_id temporal: ' . $client_id);
            }
        } else {
            $client_id = 0;
            error_log('[Veterinalia Booking] No hay email ni usuario logueado disponible para asociar cliente');
        }
    }

    // ========================================
    // PASO 2: GESTIÃƒâ€œN DE LA MASCOTA
    // ========================================
    $pet_id = null;
    $pet_name = isset($booking_data['pet_name']) ? sanitize_text_field($booking_data['pet_name']) : '';

    if (!empty($pet_name) && $client_id) {
        error_log('[Veterinalia Booking] Creando mascota para cliente ID: ' . $client_id);

        // Verificar si ya existe una mascota con el mismo nombre para este cliente
        $existing_pet = $this->crm()->get_pet_by_name_and_client($pet_name, $client_id);

        if ($existing_pet) {
            // Usar la mascota existente
            $pet_id = $existing_pet->pet_id;
            error_log('[Veterinalia Booking] Usando mascota existente: ID ' . $pet_id);

            // Actualizar los datos de la mascota existente si se proporcionaron nuevos datos
            $pet_species = isset($booking_data['pet_species']) ? sanitize_text_field($booking_data['pet_species']) : '';
            $pet_breed = isset($booking_data['pet_breed']) ? sanitize_text_field($booking_data['pet_breed']) : '';

            if (!empty($pet_species) || !empty($pet_breed) || isset($booking_data['pet_gender'])) {
                $update_data = [];
                if (!empty($pet_species) && $existing_pet->species !== $pet_species) {
                    $update_data['species'] = $pet_species;
                }
                if (!empty($pet_breed) && $existing_pet->breed !== $pet_breed) {
                    $update_data['breed'] = $pet_breed;
                }
                if (isset($booking_data['pet_gender']) && $existing_pet->gender !== $booking_data['pet_gender']) {
                    $update_data['gender'] = $booking_data['pet_gender'];
                }

                if (!empty($update_data)) {
                    $this->crm()->update_pet($pet_id, $update_data);
                    error_log('[Veterinalia Booking] Mascota actualizada con nuevos datos: ' . json_encode($update_data));
                }
            }
        } else {
            // Crear nueva mascota
            $pet_data = [
                'client_id' => $client_id,
                'name' => $pet_name,
                'species' => isset($booking_data['pet_species']) ? sanitize_text_field($booking_data['pet_species']) : 'unknown',
                'breed' => isset($booking_data['pet_breed']) ? sanitize_text_field($booking_data['pet_breed']) : null,
                'gender' => isset($booking_data['pet_gender']) ? sanitize_text_field($booking_data['pet_gender']) : 'unknown',
                'professional_id' => intval($booking_data['professional_id'])
            ];

            $pet_id = $this->crm()->create_pet_with_share_code($pet_data);
        }
        if (!$pet_id) {
            error_log('[Veterinalia Booking] ERROR: FallÃƒÂ³ la creaciÃƒÂ³n de la mascota');
            return ['success' => false, 'data' => ['message' => 'Error al crear el perfil de la mascota.', 'code' => 'pet_creation_failed']];
        }

        error_log('[Veterinalia Booking] Mascota creada exitosamente: ID ' . $pet_id);
    }

    // --- NUEVA VALIDACIÃƒâ€œN: Verificar que la mascota pertenece al cliente correcto ---
    if (!empty($booking_data['pet_id']) && !empty($client_id)) {
        error_log('[Veterinalia Booking] Validando relaciÃƒÂ³n mascota-cliente: pet_id=' . $booking_data['pet_id'] . ', client_id=' . $client_id);

        // Obtener la mascota para verificar su client_id
        $pet = $this->crm()->get_pet_by_id($booking_data['pet_id']);
        if (!$pet) {
            error_log('[Veterinalia Booking] Mascota no encontrada: ' . $booking_data['pet_id']);
            return ['success' => false, 'data' => ['message' => 'Mascota no encontrada']];
        }

        // Verificar que la mascota pertenece al cliente especificado
        if ($pet->client_id != $client_id) {
            error_log('[Veterinalia Booking] ERROR: La mascota ' . $booking_data['pet_id'] . ' pertenece al cliente ' . $pet->client_id . ', no al cliente ' . $client_id);
            return ['success' => false, 'data' => ['message' => 'La mascota seleccionada no pertenece al cliente especificado']];
        }

        $pet_id = intval($booking_data['pet_id']); // Usar la mascota existente
        error_log('[Veterinalia Booking] ValidaciÃƒÂ³n mascota-cliente exitosa, usando mascota existente');
    }

    // Bloqueo transaccional para evitar reservas duplicadas
    global $wpdb;
    $wpdb->query('START TRANSACTION');

    try {
        // VerificaciÃƒÂ³n final de disponibilidad (mÃƒÂ¡s robusta)
        $is_slot_taken = $this->booking_repository()->is_slot_already_booked(
            intval( $booking_data['professional_id'] ),
            date('Y-m-d H:i:s', $appointment_start_time),
            date('Y-m-d H:i:s', $appointment_end_time)
        );

        if ($is_slot_taken) {
            $wpdb->query('ROLLBACK');
            error_log('[Veterinalia Appointment] Intento de reserva duplicada fallido para el slot: ' . date('Y-m-d H:i:s', $appointment_start_time));
            return ['success' => false, 'data' => ['message' => 'Lo sentimos, este horario acaba de ser reservado por otra persona.', 'code' => 'slot_taken']];
        }

        // Preparar datos para insertar en la tabla `va_appointments`
        $data_to_insert = [
            'professional_id'  => intval($booking_data['professional_id']),
            'client_id'        => $client_id,
            'service_id'       => $service_id,
            'appointment_start'=> date('Y-m-d H:i:s', $appointment_start_time),
            'appointment_end'  => date('Y-m-d H:i:s', $appointment_end_time),
            'status'           => 'pending',
            'price_at_booking' => $price,
            'client_name'      => sanitize_text_field($booking_data['client_name']),
            'client_email'     => sanitize_email($booking_data['client_email']),
            'pet_name'         => $pet_name,
            'pet_id'           => $pet_id,
            'client_phone'     => isset($booking_data['client_phone']) ? sanitize_text_field($booking_data['client_phone']) : '',
            'notes'            => isset($booking_data['notes']) ? sanitize_textarea_field($booking_data['notes']) : '',
        ];

        error_log('[Veterinalia Booking] Datos completos listos para insertar en BD: ' . json_encode($data_to_insert));

        $inserted = $this->booking_repository()->insert_appointment( $data_to_insert );

        if ($inserted) {
            $appointment_id = $inserted;
            $wpdb->query('COMMIT');

            error_log('[Veterinalia Booking] Cita creada exitosamente con ID: ' . $appointment_id);

            // ========================================
            // PASO 3: ENVÃƒÂO DE EMAILS
            // ========================================
            $this->send_booking_emails($appointment_id, $is_new_client, $client_id, $pet_id, $booking_data);

            return ['success' => true, 'data' => 'Cita reservada con ÃƒÂ©xito'];
        } else {
            $wpdb->query('ROLLBACK');
            error_log('[Veterinalia Appointment] FallÃƒÂ³ la inserciÃƒÂ³n en la BD: ' . $wpdb->last_error);
            return ['success' => false, 'data' => ['message' => 'Error al guardar la cita', 'code' => 'db_error']];
        }
    } catch (Exception $e) {
        $wpdb->query('ROLLBACK');
        error_log('[Veterinalia Appointment] ExcepciÃƒÂ³n en reserva: ' . $e->getMessage());
        return ['success' => false, 'data' => ['message' => 'Error en el proceso de reserva', 'code' => 'exception']];
    }
}

    /**
     * Obtiene todas las citas para un profesional especÃƒÂ­fico.
     *
     * @param int $professional_id ID del profesional.
     * @param array $args Argumentos de la consulta (ej. 'status', 'orderby', 'order').
     * @return array Array de objetos de las citas.
     */
    public function get_professional_appointments( $professional_id, $args = [] ) {
        if ( empty( $professional_id ) ) {
            return [];
        }
        $appointments = $this->booking_repository()->get_appointments_by_professional_id( intval( $professional_id ), $args );
        return is_array( $appointments ) ? $appointments : [];
    }

    /**
     * Actualiza el estado de una cita.
     *
     * @param int $appointment_id ID de la cita a actualizar.
     * @param string $new_status El nuevo estado (e.g., 'confirmed', 'cancelled', 'completed').
     * @param int $professional_id Opcional. ID del profesional para verificar la propiedad de la cita.
     * @return bool True si la actualizaciÃƒÂ³n fue exitosa, false en caso contrario.
     */
    public function update_appointment_status( $appointment_id, $new_status, $professional_id = 0 ) {
        // Por simplicidad, por ahora solo actualizaremos por ID de cita.
        // En un sistema mÃƒÂ¡s robusto, se deberÃƒÂ­a verificar que $professional_id es el dueÃƒÂ±o de la cita.
        $updated = $this->booking_repository()->update_appointment_status( intval( $appointment_id ), (string) $new_status );

        if ( $updated ) {
            // Obtener los detalles completos de la cita para el correo electrÃƒÂ³nico
            // Esto requerirÃƒÂ­a un mÃƒÂ©todo en la DB para obtener una cita por ID
            // Por ahora, simularemos algunos detalles
            
            // Obtener cita de la base de datos para el mailer
            $appointment_from_db = Veterinalia_Appointment_Database::get_instance()->get_appointment_by_id( $appointment_id );

            if ( $appointment_from_db ) {
                // Obtener informaciÃƒÂ³n del profesional (usuario)
                $professional_user = get_user_by('ID', $appointment_from_db->professional_id);
                $professional_name = $professional_user ? $professional_user->display_name : 'Profesional no especificado';
                $professional_email = $professional_user ? $professional_user->user_email : '';
                
                $appointment_details = [
                    'appointment_id'    => $appointment_from_db->id,
                    'status'            => $new_status,
                    'professional_id'   => $appointment_from_db->professional_id,
                    'professional_name' => $professional_name,
                    'professional_email' => $professional_email,
                    'client_name'       => $appointment_from_db->client_name,
                    'client_email'      => $appointment_from_db->client_email,
                    'appointment_date'  => date('Y-m-d', strtotime($appointment_from_db->appointment_start)),
                    'appointment_time'  => date('H:i', strtotime($appointment_from_db->appointment_start)),
                    'notes'             => $appointment_from_db->notes,
                ];
            } else {
                // Si no se encuentra la cita, usar placeholders
                $appointment_details = [
                    'appointment_id'    => $appointment_id,
                    'status'            => $new_status,
                    'professional_id'   => $professional_id, 
                    'professional_name' => '[Profesional Desconocido]',
                    'professional_email' => '[Email Profesional Desconocido]',
                    'client_name'       => '[Cliente Desconocido]',
                    'client_email'      => '[Email Cliente Desconocido]',
                    'appointment_date'  => '[Fecha Desconocida]',
                    'appointment_time'  => '[Hora Desconocida]',
                    'notes'             => '',
                ];
            }

            $this->mailer->send_appointment_status_email_to_client( $appointment_details );
            $this->mailer->send_appointment_status_email_to_professional( $appointment_details );
        }

        return $updated;
    }
    
/**
 * Registra las rutas de la API REST para el dashboard del profesional.
 */
public function register_api_routes() {
    error_log('[API Registration] Registrando rutas de la API de Veterinalia...');
    
    $namespace = 'vetapp/v1';

    // Ruta genÃƒÂ©rica para cargar los mÃƒÂ³dulos del dashboard
    register_rest_route($namespace, '/dashboard/(?P<module_name>\w+)', array(
        'methods'             => 'GET',
        'callback'            => array($this, 'get_dashboard_module_content'),
        'permission_callback' => function () {
            return true;
        },
        'args' => [
            'module_name' => [
                'validate_callback' => function($param, $request, $key) {
                    return is_string($param);
                }
            ],
            'employee_id' => [
                'required' => true,
                'validate_callback' => function($param, $request, $key) {
                    return is_numeric($param);
                }
            ]
        ]
    ));

    // Ruta para actualizar el estado de una cita especÃƒÂ­fica
    register_rest_route($namespace, '/appointments/(?P<id>\d+)/status', array(
        'methods'             => WP_REST_Server::EDITABLE,
        'callback'            => array($this, 'update_appointment_status_api'),
        'permission_callback' => function () {
            return true; 
        },
        'args' => [
            'id' => [
                'validate_callback' => function($param) {
                    return is_numeric($param);
                },
                'description' => 'El ID ÃƒÂºnico de la cita.'
            ],
            'status' => [
                'required' => true,
                'validate_callback' => function($param) {
                    return in_array($param, ['confirmed', 'completed', 'cancelled']);
                },
                'description' => 'El nuevo estado para la cita.'
            ]
        ]
    ));
    
    // Ruta para obtener los servicios de una categorÃƒÂ­a especÃƒÂ­fica
    register_rest_route($namespace, '/categories/(?P<category_id>\d+)/services', array(
        'methods'             => 'GET',
        'callback'            => array($this, 'get_services_for_category_api'),
        'permission_callback' => function () {
            return is_user_logged_in();
        },
        'args' => [
            'category_id' => [
                'validate_callback' => function($param) {
                    return is_numeric($param);
                },
                'description' => 'El ID ÃƒÂºnico de la categorÃƒÂ­a.'
            ]
        ]
    ));
}

/**
 * FunciÃƒÂ³n de callback para manejar las peticiones a la API del dashboard.
 * Obtiene el contenido HTML de un mÃƒÂ³dulo especÃƒÂ­fico.
 *
 * @param WP_REST_Request $request La peticiÃƒÂ³n de la API.
 * @return WP_REST_Response La respuesta de la API.
 */
    public function get_dashboard_module_content( $request ) {
        $module_name = $request->get_param('module_name');
        $employee_id = $request->get_param('employee_id');

        // AquÃƒÂ­ puedes aÃƒÂ±adir lÃƒÂ³gica para verificar permisos si es necesario
        
        // --- LÃƒâ€œGICA PARA CARGAR EL MÃƒâ€œDULO CORRECTO ---
        $template_path = '';
        
        if ($module_name === 'appointments') {
            // Para el mÃƒÂ³dulo de appointments, cargar nuestro nuevo mÃƒÂ³dulo de agenda
            $template_path = VA_PLUGIN_DIR . '/templates/modules/agenda-module.php';
        } elseif ($module_name === 'patients') {
            // Para el mÃƒÂ³dulo de pacientes, cargar el mÃƒÂ³dulo CRM
            $template_path = VA_PLUGIN_DIR . '/templates/modules/patients-module.php';
        } else {
            // Para otros mÃƒÂ³dulos, usar la lÃƒÂ³gica original
            $template_path = VA_PLUGIN_DIR . "/templates/modules/{$module_name}-module.php";
        }

        if ( file_exists( $template_path ) ) {
            // Usamos output buffering para capturar el HTML del archivo de la plantilla
            ob_start();
            // Pasamos el ID del empleado para que la plantilla pueda usarlo
            include $template_path;
            $html_content = ob_get_clean();

            // Devolvemos una respuesta exitosa con el HTML del mÃƒÂ³dulo
            return new WP_REST_Response( [ 
                'success' => true, 
                'html' => $html_content 
            ], 200 );

        } else {
            // Si el archivo del mÃƒÂ³dulo no existe, devolvemos un error claro
            return new WP_Error(
                'module_not_found',
                "El archivo de la plantilla del mÃƒÂ³dulo '{$module_name}' no se encontrÃƒÂ³.",
                [ 'status' => 404 ]
            );
        }
    }

/**
 * Callback de la API para actualizar el estado de una cita.
 *
 * @param WP_REST_Request $request La peticiÃƒÂ³n de la API.
 * @return WP_REST_Response|WP_Error La respuesta de la API.
 */
public function update_appointment_status_api( $request ) {
    // Obtenemos los parÃƒÂ¡metros de la URL y del cuerpo de la peticiÃƒÂ³n.
    $appointment_id = (int) $request['id'];
    $params = $request->get_json_params();
    $new_status = isset($params['status']) ? sanitize_text_field($params['status']) : null;

    // Mensaje de depuraciÃƒÂ³n inicial.
    error_log("[API Update Status] PeticiÃƒÂ³n recibida para cita ID: {$appointment_id} con nuevo estado: {$new_status}");

    // VerificaciÃƒÂ³n de que los datos necesarios estÃƒÂ¡n presentes.
    if ( empty($new_status) ) {
        return new WP_Error(
            'bad_request',
            'El nuevo estado es requerido.',
            [ 'status' => 400 ]
        );
    }

    // Usamos el mÃƒÂ©todo que ya existe para actualizar la base de datos.
    $updated = $this->update_appointment_status( $appointment_id, $new_status );

    if ( $updated ) {
        // Si la actualizaciÃƒÂ³n fue exitosa, devolvemos una respuesta positiva.
        $response_data = [
            'success' => true,
            'message' => "Estado de la cita actualizado exitosamente a '{$new_status}'",
            'appointment_id' => $appointment_id,
            'new_status' => $new_status,
        ];
        error_log("[API Update Status] Ãƒâ€°xito al actualizar la cita ID: {$appointment_id}");
        return new WP_REST_Response( $response_data, 200 );
    } else {
        // Si la actualizaciÃƒÂ³n fallÃƒÂ³, devolvemos un error del servidor.
        error_log("[API Update Status] FallÃƒÂ³ la actualizaciÃƒÂ³n en la BD para la cita ID: {$appointment_id}");
        return new WP_Error(
            'update_failed',
            'No se pudo actualizar el estado de la cita en la base de datos.',
            [ 'status' => 500 ]
        );
    }
}
    /**
     * Ejecuta la migraciÃƒÂ³n de la base de datos para la estructura de horarios.
     * Se ejecuta una sola vez.
     */
    public function run_database_migration() {
        // OpciÃƒÂ³n para controlar si la migraciÃƒÂ³n ya se ejecutÃƒÂ³.
        if (get_option('va_schedule_migration_done')) {
            return;
        }

        global $wpdb;
        $table_availability = $wpdb->prefix . 'va_professional_availability';

        // 1. AÃƒÂ±adir temporalmente la nueva columna si no existe.
        $wpdb->query("ALTER TABLE $table_availability ADD COLUMN dia_semana_id BIGINT(20) NOT NULL DEFAULT 0 AFTER professional_id");

        // 2. Mapeo de dÃƒÂ­as de la semana a IDs.
        $day_map = [
            'monday'    => 1, 'tuesday'   => 2, 'wednesday' => 3,
            'thursday'  => 4, 'friday'    => 5, 'saturday'  => 6, 'sunday'    => 7,
        ];

        // 3. Actualizar filas existentes en lotes para no sobrecargar el servidor.
        $batch_size = 100;
        $offset = 0;
        while ($schedules = $wpdb->get_results($wpdb->prepare("SELECT id, day_of_week FROM $table_availability WHERE dia_semana_id = 0 LIMIT %d OFFSET %d", $batch_size, $offset))) {
            foreach ($schedules as $schedule) {
                $day_text = strtolower(trim($schedule->day_of_week));
                if (isset($day_map[$day_text])) {
                    $wpdb->update(
                        $table_availability,
                        ['dia_semana_id' => $day_map[$day_text]],
                        ['id' => $schedule->id],
                        ['%d'],
                        ['%d']
                    );
                }
            }
            $offset += $batch_size;
        }

        // 4. Marcar la migraciÃƒÂ³n como completada.
        update_option('va_schedule_migration_done', true);

        // Opcional: En una futura actualizaciÃƒÂ³n se podrÃƒÂ­a eliminar la columna `day_of_week`.
        // Por ahora, la dejamos para seguridad.
        // $wpdb->query("ALTER TABLE $table_availability DROP COLUMN day_of_week");
    }

/**
 * Callback de la API para obtener los servicios de una categorÃƒÂ­a.
 *
 * @param WP_REST_Request $request La peticiÃƒÂ³n de la API.
 * @return WP_REST_Response|WP_Error La respuesta de la API.
 */
public function get_services_for_category_api( $request ) {
    $category_id = (int) $request['category_id'];

    if ( empty($category_id) ) {
        return new WP_Error('bad_request', 'ID de categorÃƒÂ­a no vÃƒÂ¡lido.', ['status' => 400]);
    }

    // Opcional: AÃƒÂ±adir una capa de seguridad para verificar que el usuario
    // es el dueÃƒÂ±o de la categorÃƒÂ­a, si fuera necesario.

    $services = $this->db_handler->get_services_by_category($category_id);

    return new WP_REST_Response(['success' => true, 'data' => $services], 200);
}

    // ======================================================= */
    // === MÃƒâ€°TODOS PARA EL MÃƒâ€œDULO DE AGENDA                === */
    // ======================================================= */

    /**
     * [FUNCIÃƒâ€œN ELIMINADA]
     * Se elimina get_professional_appointments_for_agenda porque su lÃƒÂ³gica
     * se maneja directamente en el template del mÃƒÂ³dulo para mayor claridad
     * y para evitar redundancia con get_professional_appointments.
     */

    /**
     * Obtiene la disponibilidad de un profesional para un rango de fechas.
     * ÃƒÅ¡til para el mÃƒÂ³dulo de agenda para mostrar slots disponibles.
     *
     * @param int $professional_id ID del profesional
     * @param string $date_from Fecha de inicio (Y-m-d)
     * @param string $date_to Fecha de fin (Y-m-d)
     * @return array Array con disponibilidad por dÃƒÂ­a
     */
    public function get_professional_availability_for_range($professional_id, $date_from, $date_to) {
        if (empty($professional_id) || empty($date_from) || empty($date_to)) {
            return [];
        }

        $professional_id = intval($professional_id);
        $schedule        = $this->availability_repository()->get_professional_availability( $professional_id );

        $schedule_by_day = [];
        foreach ($schedule as $slot) {
            $day_index = isset($slot->dia_semana_id) ? intval($slot->dia_semana_id) : 0;
            if ($day_index > 0) {
                $schedule_by_day[$day_index] = $slot;
            }
        }

        $availability = [];
        $current_date = new DateTime($date_from);
        $end_date     = new DateTime($date_to);

        while ($current_date <= $end_date) {
            $day_index = intval($current_date->format('N'));
            $date_key  = $current_date->format('Y-m-d');

            if (isset($schedule_by_day[$day_index])) {
                $slot = $schedule_by_day[$day_index];
                $availability[$date_key] = [
                    'day_of_week' => strtolower($current_date->format('l')),
                    'start_time'  => $slot->start_time,
                    'end_time'    => $slot->end_time,
                    'is_available'=> intval($slot->is_available) === 1,
                ];
            } else {
                $availability[$date_key] = [
                    'day_of_week' => strtolower($current_date->format('l')),
                    'is_available'=> false,
                ];
            }

            $current_date->add(new DateInterval('P1D'));
        }

        return $availability;
    }



    /**
     * Crea una nueva cita desde el mÃƒÂ³dulo de agenda.
     * Incluye validaciones y notificaciones.
     *
     * @param array $appointment_data Datos de la cita
     * @return array Resultado de la operaciÃƒÂ³n
     */
    public function create_appointment_from_agenda($appointment_data) {
        error_log('[Veterinalia Manager] Iniciando creaciÃƒÂ³n de cita desde agenda con datos: ' . print_r($appointment_data, true));
        
        // Validar datos requeridos
        $required_fields = ['service_id', 'client_name', 'pet_name', 'pet_id', 'date', 'start_time', 'professional_id']; // AÃƒÂ±adido pet_id
        foreach ($required_fields as $field) {
            if (empty($appointment_data[$field])) {
                error_log('[Veterinalia Manager] Campo requerido faltante: ' . $field);
                return [
                    'success' => false,
                    'message' => "Campo requerido faltante: {$field}"
                ];
            }
        }
        
        error_log('[Veterinalia Manager] Validando profesional ID: ' . $appointment_data['professional_id']);
        
        // Validar que el profesional existe
        if (!$this->db_handler->professional_exists($appointment_data['professional_id'])) {
            error_log('[Veterinalia Manager] Profesional no encontrado: ' . $appointment_data['professional_id']);
            return [
                'success' => false,
                'message' => 'Profesional no encontrado'
            ];
        }
        
        error_log('[Veterinalia Manager] Validando servicio ID: ' . $appointment_data['service_id']);
        
        // Validar que el servicio existe y pertenece al profesional
        if (!$this->db_handler->service_belongs_to_professional(
            $appointment_data['service_id'], 
            $appointment_data['professional_id']
        )) {
            error_log('[Veterinalia Manager] Servicio no vÃƒÂ¡lido para este profesional');
            return [
                'success' => false,
                'message' => 'Servicio no vÃƒÂ¡lido para este profesional'
            ];
        }

        // --- NUEVA VALIDACIÃƒâ€œN: Verificar que la mascota pertenece al cliente correcto ---
        if (!empty($appointment_data['client_id'])) {
            error_log('[Veterinalia Manager] Validando relaciÃƒÂ³n mascota-cliente: pet_id=' . $appointment_data['pet_id'] . ', client_id=' . $appointment_data['client_id']);
            
            // Obtener la mascota para verificar su client_id
            $pet = $this->crm()->get_pet_by_id($appointment_data['pet_id']);
            if (!$pet) {
                error_log('[Veterinalia Manager] Mascota no encontrada: ' . $appointment_data['pet_id']);
                return [
                    'success' => false,
                    'message' => 'Mascota no encontrada'
                ];
            }
            
            // Verificar que la mascota pertenece al cliente especificado
            if ($pet->client_id != $appointment_data['client_id']) {
                error_log('[Veterinalia Manager] ERROR: La mascota ' . $appointment_data['pet_id'] . ' pertenece al cliente ' . $pet->client_id . ', no al cliente ' . $appointment_data['client_id']);
                return [
                    'success' => false,
                    'message' => 'La mascota seleccionada no pertenece al cliente especificado'
                ];
            }
            
            error_log('[Veterinalia Manager] ValidaciÃƒÂ³n mascota-cliente exitosa');
        }
        
        // Construir fecha y hora completa
        $appointment_start = $appointment_data['date'] . ' ' . $appointment_data['start_time'] . ':00';
        $appointment_end = $appointment_data['date'] . ' ' . $appointment_data['end_time'] . ':00';
        
        // Verificar disponibilidad
        if (!$this->check_time_slot_availability(
            $appointment_data['professional_id'],
            $appointment_start,
            $appointment_end
        )) {
            return [
                'success' => false,
                'message' => 'El horario seleccionado no estÃƒÂ¡ disponible'
            ];
        }
        
        // Preparar datos para inserciÃƒÂ³n
        $insert_data = [
            'professional_id' => $appointment_data['professional_id'],
            'service_id' => $appointment_data['service_id'],
            'client_id' => isset($appointment_data['client_id']) ? intval($appointment_data['client_id']) : null, // AÃƒÂ±adido client_id
            'client_name' => sanitize_text_field($appointment_data['client_name']),
            'client_email' => sanitize_email($appointment_data['email'] ?? ''),
            'client_phone' => sanitize_text_field($appointment_data['phone'] ?? ''),
            'pet_name' => sanitize_text_field($appointment_data['pet_name']),
            'pet_id' => intval($appointment_data['pet_id']),
            'appointment_start' => $appointment_start,
            'appointment_end' => $appointment_end,
            'status' => 'pending',
            'notes' => sanitize_textarea_field($appointment_data['notes'] ?? ''),
            'created_at' => current_time('mysql')
        ];
        
        // Insertar en base de datos
        $appointment_id = $this->booking_repository()->insert_appointment( $insert_data );

        if ( ! $appointment_id ) {
            error_log('[Veterinalia Manager] Error en inserción de cita desde la agenda');
            return [
                'success' => false,
                'message' => 'Error al crear la cita en la base de datos'
            ];
        }

        error_log('[Veterinalia Manager] Cita creada exitosamente con ID: ' . $appointment_id);
        
        // Enviar notificaciÃƒÂ³n por email si estÃƒÂ¡ configurado
        if (!empty($appointment_data['email'])) {
            try {
                $this->mailer->send_appointment_confirmation($appointment_id);
                error_log('[Veterinalia Manager] Email de confirmaciÃƒÂ³n enviado');
            } catch (Exception $e) {
                error_log('[Veterinalia Manager] Error enviando email: ' . $e->getMessage());
            }
        }
        
        return [
            'success' => true,
            'message' => 'Cita creada exitosamente',
            'appointment_id' => $appointment_id
        ];
    }

    /**
     * Verifica si un slot de tiempo estÃƒÂ¡ disponible para un profesional.
     *
     * @param int $professional_id ID del profesional
     * @param string $start_time Hora de inicio
     * @param string $end_time Hora de fin
     * @return bool True si estÃƒÂ¡ disponible
     */
    private function check_time_slot_availability($professional_id, $start_time, $end_time) {
        $professional_id = intval($professional_id);

        error_log('[Veterinalia Manager] Verificando disponibilidad para profesional ' . $professional_id . ' desde ' . $start_time . ' hasta ' . $end_time);

        $is_taken = $this->booking_repository()->is_slot_already_booked(
            $professional_id,
            $start_time,
            $end_time
        );

        error_log('[Veterinalia Manager] Slot disponible: ' . ($is_taken ? 'NO' : 'SÍ'));

        return ! $is_taken;
    }

    // <-- INICIO DEL CAMBIO: Proyecto Chocovainilla - Paso 3.2 -->
    /**
     * Orquesta el proceso de completar una cita y registrar su bitÃƒÂ¡cora.
     *
     * @param array $log_data Datos del formulario de la bitÃƒÂ¡cora.
     * @return array Resultado de la operaciÃƒÂ³n.
     */
    public function complete_appointment_with_log($log_data) {
        // ValidaciÃƒÂ³n de datos esenciales
        $appointment_id = isset($log_data['appointment_id']) ? intval($log_data['appointment_id']) : 0;
        $pet_id = isset($log_data['pet_id']) ? intval($log_data['pet_id']) : 0;

        if (empty($appointment_id) || empty($pet_id)) {
            return ['success' => false, 'message' => 'Faltan datos de la cita o mascota.'];
        }
        
        // 1. Guardar la entrada en la bitÃƒÂ¡cora
        $log_id = $this->crm()->pet_logs()->create_pet_log( $log_data );

        if (!$log_id) {
            error_log('[Chocovainilla] Error: No se pudo guardar la entrada en la bitÃƒÂ¡cora para la cita ' . $appointment_id);
            return ['success' => false, 'message' => 'No se pudo guardar la entrada en el historial.'];
        }
        
        error_log('[Chocovainilla] Ãƒâ€°xito: Entrada de bitÃƒÂ¡cora creada con ID ' . $log_id);

        // 2. Actualizar el estado de la cita a "completada"
        $status_updated = $this->update_appointment_status($appointment_id, 'completed');

        if (!$status_updated) {
            // Esto es poco probable, pero es una salvaguarda.
            error_log('[Chocovainilla] Advertencia: Se guardÃƒÂ³ la bitÃƒÂ¡cora pero no se pudo actualizar el estado de la cita ' . $appointment_id);
            // PodrÃƒÂ­amos decidir si revertir el log aquÃƒÂ­, pero por ahora lo dejamos como advertencia.
        }

        return ['success' => true, 'message' => 'Cita completada y registrada en la bitÃƒÂ¡cora.'];
    }
    // <-- FIN DEL CAMBIO: Proyecto Chocovainilla - Paso 3.2 -->

    /**
     * EnvÃƒÂ­a los emails correspondientes despuÃƒÂ©s de una reserva exitosa
     *
     * @param int $appointment_id ID de la cita creada
     * @param bool $is_new_client Si el cliente es nuevo (invitado)
     * @param int $client_id ID del cliente
     * @param int $pet_id ID de la mascota
     * @param array $booking_data Datos originales de la reserva
     */
    private function send_booking_emails($appointment_id, $is_new_client, $client_id, $pet_id, $booking_data) {
        error_log('[Veterinalia Booking] Iniciando envÃƒÂ­o de emails para cita ID: ' . $appointment_id);

        try {
            // Obtener informaciÃƒÂ³n del profesional desde la base de datos de usuarios
            $professional_id = intval($booking_data['professional_id']);
            $professional_user = get_user_by('ID', $professional_id);
            $professional_name = $professional_user ? $professional_user->display_name : 'Profesional';
            $professional_email = $professional_user ? $professional_user->user_email : '';

            // Crear los detalles de la cita para el mailer
            $appointment_details = [
                'appointment_id'    => $appointment_id,
                'status'            => 'pending',
                'professional_id'   => $professional_id,
                'professional_name' => $professional_name,
                'professional_email' => $professional_email,
                'client_name'       => sanitize_text_field($booking_data['client_name']),
                'client_email'      => sanitize_email($booking_data['client_email']),
                'appointment_date'  => $booking_data['date'],
                'appointment_time'  => $booking_data['time'],
                'notes'             => isset($booking_data['notes']) ? $booking_data['notes'] : '',
            ];

            // 1. Enviar email de confirmaciÃƒÂ³n al cliente
            error_log('[Veterinalia Booking] Enviando email de confirmaciÃƒÂ³n al cliente');
            $this->mailer->send_new_appointment_email_to_client($appointment_details);

            // 2. Enviar email de notificaciÃƒÂ³n al profesional (solo si tiene email vÃƒÂ¡lido)
            if (!empty($professional_email)) {
                error_log('[Veterinalia Booking] Enviando email de notificaciÃƒÂ³n al profesional: ' . $professional_email);
                $this->mailer->send_new_appointment_email_to_professional($appointment_details);
            } else {
                error_log('[Veterinalia Booking] No se pudo enviar email al profesional - email no disponible para ID: ' . $professional_id);
            }

            // 3. Si es un cliente nuevo (invitado), enviar email de invitaciÃƒÂ³n con share_code
            if ($is_new_client && $pet_id) {
                error_log('[Veterinalia Booking] Cliente nuevo detectado, enviando email de invitaciÃƒÂ³n');

                // Obtener datos de la mascota para el share_code
                $pet = $this->crm()->get_pet_by_id($pet_id);
                if ($pet && !empty($pet->share_code)) {
                    error_log('[Veterinalia Booking] Enviando invitaciÃƒÂ³n con share_code: ' . $pet->share_code);

                    $this->mailer->send_claim_invitation_email(
                        $booking_data['client_email'],
                        $booking_data['client_name'],
                        $pet->name,
                        $pet->share_code
                    );
                } else {
                    error_log('[Veterinalia Booking] ERROR: No se pudo obtener share_code para la mascota ID: ' . $pet_id);
                }
            }

            error_log('[Veterinalia Booking] Todos los emails enviados exitosamente');

        } catch (Exception $e) {
            error_log('[Veterinalia Booking] ERROR al enviar emails: ' . $e->getMessage());
            // No lanzamos la excepciÃƒÂ³n para no romper el flujo de reserva
        }
    }

    /**
     * Obtiene el client_id del usuario actual o lo crea automáticamente si no existe
     * @return int El client_id o 0 si no se pudo resolver
     */
    private function get_or_create_client_id_for_current_user() {
        $client_id_val = 0;

        if ( ! is_user_logged_in() ) {
            return $client_id_val;
        }

        $user_id = get_current_user_id();
        $crm = $this->crm();
        $client_repository = $crm->clients();
        $client_obj = $client_repository->get_client_by_user_id( $user_id );

        if ( ! empty( $client_obj ) && ! empty( $client_obj->client_id ) ) {
            return intval( $client_obj->client_id );
        }

        $user_type = get_user_meta( $user_id, '_user_type', true );
        if ( $user_type === 'author' ) {
            error_log('[Appointment Manager] Usuario ' . $user_id . ' tiene _user_type=author. NO se crea registro de cliente.');
            return 0;
        } elseif ( $user_type !== 'general' ) {
            error_log('[Appointment Manager] Usuario ' . $user_id . ' tiene _user_type=' . $user_type . ' (no es general). NO se crea registro de cliente.');
            return 0;
        }

        error_log('[Appointment Manager] Usuario ' . $user_id . ' tiene _user_type=general y no tiene registro. Creando automáticamente...');

        $client_obj = $crm->ensure_client_for_user( $user_id );

        if ( ! empty( $client_obj ) && ! empty( $client_obj->client_id ) ) {
            $client_id_val = intval( $client_obj->client_id );
            error_log('[Appointment Manager] Cliente creado automáticamente con ID: ' . $client_id_val . ' para user_id: ' . $user_id);
        } else {
            error_log('[Appointment Manager] Error al crear cliente automático para user_id: ' . $user_id);
        }

        return $client_id_val;
    }
}
    


// Inicializar la clase
Veterinalia_Appointment_Manager::get_instance()->init();
